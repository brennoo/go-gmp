package main

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/filewalkwithme/openvas-rest-api/pkg/9/gmp"
	"github.com/filewalkwithme/openvas-rest-api/pkg/9/gmp/client"
	"github.com/filewalkwithme/openvas-rest-api/pkg/9/gmp/connections"
)

// https://docs.greenbone.net/API/GMP/gmp-9.0.html
func mainnnn() {
	conn, err := connections.NewTLSConnection("127.0.0.1:9000", true)
	if err != nil {
		panic(err)
	}
	defer conn.Close()

	gmpClient := client.New(conn)

	auth := &gmp.AuthenticateCommand{}
	auth.Credentials.Username = "openvas"
	auth.Credentials.Password = "openvas"
	_, err = gmpClient.Authenticate(auth)
	if err != nil {
		panic(err)
	}

	s := &gmp.GetScannersCommand{}
	s.Filter = `name="OpenVAS Default"`
	getScannersResp, err := gmpClient.GetScanners(s)
	if err != nil {
		panic(err)
	}

	c := &gmp.GetConfigsCommand{}
	c.Filter = `name="Full and fast"`
	configResp, err := gmpClient.GetConfigs(c)
	if err != nil {
		panic(err)
	}

	createCfgCmd := &gmp.CreateConfigCommand{}
	createCfgCmd.Name = configResp.Config[0].Name + " CLONE"
	createCfgCmd.Copy = configResp.Config[0].ID
	createConfigResp, err := gmpClient.CreateConfig(createCfgCmd)
	if err != nil {
		panic(err)
	}

	gp := &gmp.GetPreferencesCommand{}
	gp.ConfigID = createConfigResp.ID
	gp.NVTOID = "1.3.6.1.4.1.25623.1.0.100315"
	getPreferencesResp, err := gmpClient.GetPreferences(gp)
	if err != nil {
		panic(err)
	}

	prefID := ""
	for _, p := range getPreferencesResp.Preference {
		if strings.HasPrefix(p.Name, "Mark unrechable Hosts as dead") {
			prefID = p.ID
		}
	}

	mc := &gmp.ModifyConfigCommand{}
	mc.ConfigID = createConfigResp.ID
	mc.Preference = new(gmp.ModifyConfigPreference)
	mc.Preference.NVT = new(gmp.ModifyConfigPreferenceNVT)
	mc.Preference.NVT.OID = "1.3.6.1.4.1.25623.1.0.100315"
	mc.Preference.Name = "1.3.6.1.4.1.25623.1.0.100315:" + prefID + ":checkbox:Mark unrechable Hosts as dead (not scanning)"
	mc.Preference.Value = "bm8K"
	_, err = gmpClient.ModifyConfig(mc)
	if err != nil {
		panic(err)
	}

	ct := &gmp.CreateTargetCommand{}
	ct.Name = "vulnbox"
	ct.Hosts = "vulnbox"
	createTargetResp, err := gmpClient.CreateTarget(ct)
	if err != nil {
		panic(err)
	}

	ctask := &gmp.CreateTaskCommand{}
	ctask.Name = "Signal"
	ctask.Config = new(gmp.CreateTaskConfig)
	ctask.Target = new(gmp.CreateTaskTarget)
	ctask.Scanner = new(gmp.CreateTaskScanner)
	ctask.Config.ID = createConfigResp.ID
	ctask.Target.ID = createTargetResp.ID
	ctask.Scanner.ID = getScannersResp.Scanner[0].ID
	createTaskResp, err := gmpClient.CreateTask(ctask)
	if err != nil {
		panic(err)
	}
	// fmt.Printf("%+v\n", createTaskResp)

	st := &gmp.StartTaskCommand{}
	st.TaskID = createTaskResp.ID
	_, err = gmpClient.StartTask(st)
	if err != nil {
		panic(err)
	}
	// fmt.Printf("%+v\n", startTaskResp)

	for {
		gt := &gmp.GetTasksCommand{}
		gt.TaskID = createTaskResp.ID
		getTasksResp, err := gmpClient.GetTasks(gt)
		if err != nil {
			panic(err)
		}
		fmt.Printf("%+v\n", getTasksResp)
		fmt.Printf("%+v\n", getTasksResp.Task[0].Progress)
		time.Sleep(10 * time.Second)

		if x, _ := strconv.Atoi(getTasksResp.Task[0].Progress.Value); x >= 100 {
			break
		}
	}

	gr := &gmp.GetResultsCommand{}
	gr.TaskID = createTaskResp.ID
	gr.Filter = `min_qod=0 rows=1000`
	results, err := gmpClient.GetResults(gr)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%+v\n", results)
	fmt.Printf("len: %+v\n", len(results.Result))

	/*
		stop := &StopTaskCommand{}
		stop.TaskID = createTaskResp.ID
		_, err = StopTask(conn, stop)
		if err != nil {
			panic(err)
		}

		fmt.Printf("Deleting...\n")
		time.Sleep(60 * time.Second)

		delete := &DeleteTaskCommand{}
		delete.TaskID = createTaskResp.ID
		delete.Ultimate = true
		_, err = DeleteTask(conn, delete)
		if err != nil {
			panic(err)
		}
		fmt.Printf("Delete complete\n")
	*/
}
